Node SQL Ecosystem
- SQLAlchemy is an example of ORM - Object Relational Mapping
- Query builder - not quite an ORM, but not SQL
- SQL Driver - WE'LL BE USING THIS 
- we're going to take what we know about SQL and then build upon that, associations,joins etc

pg 
- similar to psycopg2 with python 
- adapter to establish a connection to a database and execute SQL
    TO INSTALL npm i pg 

Using pg
- need to require it
-its common to abstract this logic to another file called db.js

DB queries are asynchonous
- USE ASYNC FUNCTIONS

SQL Injection 
- a technique where an attacker tries to execute undesirable SQL statements on your database 
- its a common attack and its easy to be vulnerable if you aren't careful 

Solution: Parameterized Queries 
- to prevent against injection, weneed to sanitize our inputs
- ORMs typically do this for you automatically 
- we sanitizeby using parameterized queries 

router.get('/good-search', async function (req, res, next) {
    try {
        const type = req.body.type;

        const results = await db.query(`SELECT id, name, type FROM users WHERE type=$1`, [type]);

        return res.json(results.rows);
    } catch (e) {
        return next (e);
    }
});

- look at the $1 next to type, that is parameterized queries 
- in the SQL statement, represent variables like $1, $2, $3 etc, you can have as many variables as you want 
- for the second agruementto db.query, pass an array of values (the [type]), $1 will evalute index 0, $2 will evaluate index 1, etc
-the variable name is 1-INDEXED


Committing 
- with SQLAlchemy you had to commit after all changes,because SQLAlchemy put all work into a db transaction 
- that isn't the case with pg - so you don't need to explicitly commit

Testing Our database
- you need a serparate test database
- we're going to need a different database for testing 
- CREATING A NEW TEST database
    -createdb usersdb_test
    -psql usersdb_test < data.SQL
